#!/usr/bin/env bash

#
# Abort with <msg>
#

abort() {
  echo
  echo "  $@" 1>&2
  echo
  exit 1
}

if [ \( -z "$1" \) -o \( -z "$2" \) -o \( -z "$3" \) ]; then
	abort no enough parameter
fi

repo=$1
path=/tmp/$2
cfgpath="${3:-config/ops.env}"
ref="${4:-develop}"
oldcwd=$PWD

dbnames=()
DBSUFFIX="_$RANDOM"
if [ -z $5 ]; then
	DBSUFFIX=""
	echo "skip db rotation during migration test";
else
	IFS=';' read -ra bases <<< "$5"
	for base in "${bases[@]}"; do
		dbnames+=("$base$DBSUFFIX")
	done
fi

if [ -d "$path" ]; then
	rm -rf "$path"
fi

mkdir -p "$path"

echo cloning $repo @ $ref to $path
git clone $repo $path
cd $path

git checkout $ref

npm ci

if [ -f "$cfgpath" ]; then
	cp "$cfgpath" .env
	cp "$cfgpath" .test.env
fi

for dbname in "${dbnames[@]}"; do
	mysql -e "DROP DATABASE IF EXISTS $dbname; CREATE DATABASE $dbname CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
done 

env-cmd .test.env DB_NAME_SUFFIX=$DBSUFFIX npm run migrate 2> /tmp/$2.migrate.err
npm run lint -- --quiet --format=json --output-file /tmp/$2.lint 2> /tmp/$2.lint.err
npm run test:unit -- --json --ci --forceExit --detectOpenHandles --outputFile=/tmp/$2.unit 2> /tmp/$2.unit.err
npm run test:inte -- --json --ci --forceExit --detectOpenHandles --outputFile=/tmp/$2.inte 2> /tmp/$2.inte.err

for dbname in "${dbnames[@]}"; do
	mysql -e "DROP DATABASE IF EXISTS $dbname;"
done 

cd $oldcwd
rm -rf $path
