#!/usr/bin/env bash

#
# Abort with <msg>
#

abort() {
  echo
  echo "  $@" 1>&2
  echo
  exit 1
}

if [ \( -z "$1" \) -o \( -z "$2" \) -o \( -z "$3" \) ]; then
	abort no enough parameter
fi

repo=$1
path=/tmp/$2
cfgpath=$3
ref="${4:-develop}"
oldcwd=$PWD

if [ -d "$path" ]; then
	rm -rf "$path"
fi

mkdir -p "$path"

echo cloning $repo @ $ref to $path
git clone $repo $path
cd $path

git checkout $ref
git submodule update --init --recursive

npm ci

# read in CONFIG_PATH, DB cread, DB_NAMES and TESTS cases
echo "reading $cfgpath..."
. "$cfgpath"

echo "copying $CONFIG_PATH..."
if [ -f "$CONFIG_PATH" ]; then
	cp "$CONFIG_PATH" .env
	cp "$CONFIG_PATH" .test.env
fi

dbnames=()
export DB_NAME_SUFFIX="_$RANDOM"
if [ -z $DB_NAMES ]; then
	DB_NAME_SUFFIX=""
	echo "skip db rotation during migration test";
else
	IFS=',' read -ra bases <<< "$DB_NAMES"
	for base in "${bases[@]}"; do
		dbnames+=("$base$DB_NAME_SUFFIX")
	done
fi

for dbname in "${dbnames[@]}"; do
	echo "creating $dbname..."
	mysql -h "$DB_HOST" \
	-P "$DB_PORT" \
	-u "$DB_USER" \
	-p"$DB_PASS" \
	-e "DROP DATABASE IF EXISTS $dbname; CREATE DATABASE $dbname CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
done 

if [ ! -z "$TEST_DBMI" ]; then
	eval ${TEST_DBMI/OUTPUT/"/tmp/$2.dbmi"} 2> /tmp/$2.dbmi.err
fi
if [ ! -z "$TEST_LINT" ]; then
	eval ${TEST_LINT/OUTPUT/"/tmp/$2.lint"} 2> /tmp/$2.lint.err
fi
if [ ! -z "$TEST_UNIT" ]; then
	eval ${TEST_UNIT/OUTPUT/"/tmp/$2.unit"} 2> /tmp/$2.unit.err
fi
if [ ! -z "$TEST_INTE" ]; then
	eval ${TEST_INTE/OUTPUT/"/tmp/$2.inte"} 2> /tmp/$2.inte.err
fi

for dbname in "${dbnames[@]}"; do
	echo "destroying $dbname..."
	mysql -h "$DB_HOST" \
	-P "$DB_PORT" \
	-u "$DB_USER" \
	-p"$DB_PASS" \
	-e "DROP DATABASE IF EXISTS $dbname;"
done 

cd $oldcwd
rm -rf $path
